{"remainingRequest":"/Users/adibaram/Documents/Coding/draw-guess/node_modules/babel-loader/lib/index.js!/Users/adibaram/Documents/Coding/draw-guess/node_modules/eslint-loader/index.js??ref--13-0!/Users/adibaram/Documents/Coding/draw-guess/src/store.js","dependencies":[{"path":"/Users/adibaram/Documents/Coding/draw-guess/src/store.js","mtime":1547378447445},{"path":"/Users/adibaram/Documents/Coding/draw-guess/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/adibaram/Documents/Coding/draw-guess/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/adibaram/Documents/Coding/draw-guess/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import Vue from 'vue';\nimport Vuex from 'vuex';\nVue.use(Vuex);\nexport default new Vuex.Store({\n  state: {\n    cheers: [],\n    filter: {},\n    position: {\n      lat: 32,\n      lng: 34\n    },\n    loggedinUser: null,\n    isLoading: false\n  },\n  getters: {\n    getCheers: function getCheers(state) {\n      return state.cheers;\n    }\n  },\n  mutations: {\n    setCheers: function setCheers(state, _ref) {\n      var cheers = _ref.cheers;\n      state.cheers = cheers;\n    }\n  },\n  actions: {\n    setLoading: function setLoading(context, _ref2) {\n      var isLoading = _ref2.isLoading;\n      context.commit('setLoading', {\n        isLoading: isLoading\n      });\n    },\n    loadCheers: function loadCheers(context) {\n      console.log('loading cheers...');\n      context.dispatch({\n        type: 'setLoading',\n        isLoading: true\n      });\n      return cheersService.query(context.state.filter).then(function (cheers) {\n        context.commit({\n          type: 'setCheers',\n          cheers: cheers\n        });\n        console.log('filter', context.state.filter);\n        console.log('cheers loaded:', cheers);\n      });\n    }\n  }\n});",{"version":3,"sources":["/Users/adibaram/Documents/Coding/draw-guess/src/store.js"],"names":["Vue","Vuex","use","Store","state","cheers","filter","position","lat","lng","loggedinUser","isLoading","getters","getCheers","mutations","setCheers","actions","setLoading","context","commit","loadCheers","console","log","dispatch","type","cheersService","query","then"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,KAAhB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAEAD,GAAG,CAACE,GAAJ,CAAQD,IAAR;AAEA,eAAe,IAAIA,IAAI,CAACE,KAAT,CAAe;AAC5BC,EAAAA,KAAK,EAAE;AACLC,IAAAA,MAAM,EAAE,EADH;AAELC,IAAAA,MAAM,EAAE,EAFH;AAGLC,IAAAA,QAAQ,EAAE;AACRC,MAAAA,GAAG,EAAE,EADG;AAERC,MAAAA,GAAG,EAAE;AAFG,KAHL;AAOLC,IAAAA,YAAY,EAAE,IAPT;AAQLC,IAAAA,SAAS,EAAE;AARN,GADqB;AAW5BC,EAAAA,OAAO,EAAE;AACPC,IAAAA,SADO,qBACGT,KADH,EACU;AACf,aAAOA,KAAK,CAACC,MAAb;AACD;AAHM,GAXmB;AAiB5BS,EAAAA,SAAS,EAAE;AACTC,IAAAA,SADS,qBACCX,KADD,QACoB;AAAA,UAAVC,MAAU,QAAVA,MAAU;AAC3BD,MAAAA,KAAK,CAACC,MAAN,GAAeA,MAAf;AACD;AAHQ,GAjBiB;AAsB5BW,EAAAA,OAAO,EAAE;AACPC,IAAAA,UADO,sBACIC,OADJ,SAC2B;AAAA,UAAZP,SAAY,SAAZA,SAAY;AAChCO,MAAAA,OAAO,CAACC,MAAR,CAAe,YAAf,EAA6B;AAACR,QAAAA,SAAS,EAATA;AAAD,OAA7B;AACD,KAHM;AAKPS,IAAAA,UALO,sBAKIF,OALJ,EAKa;AAClBG,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACAJ,MAAAA,OAAO,CAACK,QAAR,CAAiB;AAAEC,QAAAA,IAAI,EAAE,YAAR;AAAsBb,QAAAA,SAAS,EAAE;AAAjC,OAAjB;AAEA,aAAOc,aAAa,CAACC,KAAd,CAAoBR,OAAO,CAACd,KAAR,CAAcE,MAAlC,EACJqB,IADI,CACC,UAAAtB,MAAM,EAAI;AACda,QAAAA,OAAO,CAACC,MAAR,CAAe;AAAEK,UAAAA,IAAI,EAAE,WAAR;AAAqBnB,UAAAA,MAAM,EAANA;AAArB,SAAf;AACAgB,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBJ,OAAO,CAACd,KAAR,CAAcE,MAApC;AACAe,QAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BjB,MAA9B;AAED,OANI,CAAP;AAOD;AAhBM;AAtBmB,CAAf,CAAf","sourcesContent":["import Vue from 'vue';\nimport Vuex from 'vuex';\n\nVue.use(Vuex);\n\nexport default new Vuex.Store({\n  state: {\n    cheers: [],\n    filter: {},\n    position: {\n      lat: 32,\n      lng: 34\n    },\n    loggedinUser: null,\n    isLoading: false,\n  },\n  getters: {\n    getCheers(state) {\n      return state.cheers;\n    }\n  },\n\n  mutations: {\n    setCheers(state, { cheers }) {\n      state.cheers = cheers;\n    }\n  },\n  actions: {\n    setLoading(context , {isLoading}) {\n      context.commit('setLoading', {isLoading});\n    },\n    \n    loadCheers(context) {\n      console.log('loading cheers...');\n      context.dispatch({ type: 'setLoading', isLoading: true});\n\n      return cheersService.query(context.state.filter)\n        .then(cheers => {\n          context.commit({ type: 'setCheers', cheers });\n          console.log('filter', context.state.filter);\n          console.log('cheers loaded:', cheers);\n\n        })\n    },\n\n  },\n\n});\n"]}]}